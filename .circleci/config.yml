version: 2.1

commands:
  prepare:
    parameters:
      php:
        type: string
      composer:
        type: string

    steps:
      - run:
          name: Configure environment
          command: |
            apk update && apk add npm gcc autoconf make musl-dev oniguruma-dev git

      - checkout

      - run:
          name: Preparing environment
          command: |
            PHP_EXT_DIR=$(php-config --extension-dir)
            echo $PHP_EXT_DIR
            echo ${PHP_EXT_DIR}
            mkdir php-ext-cache

      - restore_cache:
          keys:
            - PHP<< parameters.php >>-{{ checksum "composer.json" }}

      - run:
          name: Restore PHP extensions
          command: |
            cp -R php-ext-cache/. ${PHP_EXT_DIR}/

      # - run:
      #     name: Configure environment
      #     command: >
      #       pecl install pcov
      #       docker-php-ext-enable pcov
      #       docker-php-ext-install posix pcntl mbstring
      #       npm install -g snyk

      # - run:
      #     name: Install mongodb pecl extensions if mongodb.so is not there
      #     command: >
      #       if [ ! -f /usr/local/lib/php/extensions/no-debug-non-zts-20160303/mongodb.so ]; then
      #           sudo pecl install mongodb ;
      #       fi

      - run:
          name: Install Composer
          command: |
            if [ ! -f composer.phar ]; then
              wget https://raw.githubusercontent.com/composer/getcomposer.org/76a7060ccb93902cd7576b67264ad91c8a2700e2/web/installer -O - -q | php -- --quiet
            fi

      - run:
          name: Install dependencies
          command: |
            php composer.phar install --no-interaction --prefer-dist << parameters.composer >>
            php composer.phar update --no-interaction --prefer-dist << parameters.composer >>
            npm install snyk

      - run:
          name: Caching PHP extensions
          command: |
            rm -rf php-ext-cache/*
            cp -R ${PHP_EXT_DIR}/* php-ext-cache/

      - save_cache:
          key: PHP<< parameters.php >>-{{ checksum "composer.json" }}
          paths:
            - node_modules
            - vendor
            - composer.phar
            - php-ext-cache

  run-phpinsights:
    steps:
      - run:
          name: Run code quality analysis (PHP Insights)
          command: php ./vendor/bin/phpinsights -v --no-interaction --min-quality=90 --min-complexity=50 --min-architecture=90 --min-style=90

  run-phpstan:
    steps:
      - run:
          name: Run static code analysis (PHPStan)
          command: php ./vendor/bin/phpstan analyse --ansi --memory-limit 512M

  run-psalm:
    steps:
      - run:
          name: Run static code analysis (Psalm)
          command: php ./vendor/bin/psalm --threads=$(nproc)

  run-pest:
    parameters:
      clover:
        type: string
    steps:
      - run:
          name: Run unit tests (Pest)
          command: php ./vendor/bin/pest --stop-on-failure --min=80 --coverage-clover=<< parameters.clover >>/coverage.xml --coverage-xml=<< parameters.clover >>/coverage-xml --log-junit=<< parameters.clover >>/junit.xml
      - persist_to_workspace:
          root: .
          paths:
            - src
            - tests
            - infection.json.dist
            - phpunit.xml.dist
            - build
            - vendor

  run-infection:
    parameters:
      clover:
        type: string
    steps:
      - run:
          name: Run mutation tests (Infection)
          command: php ./vendor/bin/infection --skip-initial-tests --threads=$(nproc) --test-framework=pest --coverage=<< parameters.clover >> --no-progress --min-msi=48 --min-covered-msi=70

  run-snyk:
    steps:
      - run:
          name: Run vulnerabilities tests (Snyk)
          command: snyk test --org=auth0-sdks --project-name=auth0-PHP

jobs:
  run-tests:
    parameters:
      php:
        type: string
      composer:
        type: string
        default: ""
      snyk:
        type: boolean
        default: false
      infection:
        type: boolean
        default: false
      clover:
        type: string
        default: "build/coverage"
    docker:
      - image: php:<< parameters.php >>-cli-alpine
    steps:
      - prepare:
          php: << parameters.php >>
          composer: << parameters.composer >>
      - run-phpinsights
      - run-phpstan
      - run-psalm
      - run-pest:
          clover: << parameters.clover >>
      - run-snyk
      - when:
          condition:
            and:
              - equal: [main, <<pipeline.git.branch >>]
              - equal: [true, << parameters.snyk >>]
          steps:
            - run-snyk
      - when:
          condition:
            and:
              - equal: [main, <<pipeline.git.branch >>]
              - equal: [true, << parameters.infection >>]
          steps:
            - run-infection:
                clover: << parameters.clover >>

workflows:
  run-tests:
    jobs:
      - run-tests:
          name: run-tests-7.4
          php: "7.4"
          snyk: true
          infection: true
          context:
            - snyk-env
      - run-tests:
          name: run-tests-8.0
          php: "8.0"
      # - run-tests:
      #     name: run-tests-8.1
      #     php: "8.1.0beta1"
      #     composer: "--ignore-platform-reqs"
