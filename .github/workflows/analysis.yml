name: Analysis

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  dependencies:
    name: Dependencies
    runs-on: ubuntu-latest

    strategy:
      max-parallel: 10
      matrix:
        php: ["7.4", "8.0", "8.1"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          coverage: pcov
          extensions: mbstring
        env:
          update: true
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}-${{ github.run_id }}

      - name: Install dependencies with composer
        run: composer update --no-ansi --no-interaction --no-progress --prefer-dist --prefer-stable

  pest:
    name: Pest
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: ["dependencies"]

    strategy:
      max-parallel: 10
      matrix:
        php: ["7.4", "8.0", "8.1"]

    steps:
      - name: Set up PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          coverage: pcov
          extensions: mbstring
        env:
          update: true
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}-${{ github.run_id }}
          restore-keys: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}-${{ github.run_id }}

      - name: Install dependencies with composer
        run: composer install --prefer-dist

      - name: Execute Pest
        run: vendor/bin/pest --configuration .github/workflows-configs/phpunit.xml.dist --coverage-clover coverage/coverage.xml --no-interaction

      - if: (matrix.php == '8.1')
        name: Store coverage file
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: coverage/coverage.xml

  codecov:
    name: Codecov
    runs-on: ubuntu-latest
    needs: ["pest"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Recover code coverage file from Pest run
        uses: actions/download-artifact@v3
        with:
          name: code-coverage-report
          path: coverage/coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          directory: coverage

  phpstan:
    name: PHPStan
    runs-on: ubuntu-latest
    needs: ["dependencies"]

    strategy:
      fail-fast: true
      max-parallel: 10
      matrix:
        php: ["7.4", "8.0", "8.1"]

    steps:
      - name: Set up PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          coverage: none
          extensions: mbstring
        env:
          update: true
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}-${{ github.run_id }}
          restore-keys: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}-${{ github.run_id }}

      - name: Install dependencies
        run: composer install --prefer-dist

      - name: Execute PHPStan
        run: vendor/bin/phpstan analyze --configuration .github/workflows-configs/phpstan.neon.dist --no-progress

  psalm:
    name: Psalm
    runs-on: ubuntu-latest
    needs: ["dependencies"]

    strategy:
      fail-fast: true
      max-parallel: 10
      matrix:
        php: ["7.4", "8.0", "8.1"]

    steps:
      - name: Set up PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          coverage: none
          extensions: mbstring
        env:
          update: true
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}-${{ github.run_id }}
          restore-keys: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}-${{ github.run_id }}

      - name: Install dependencies
        run: composer install --prefer-dist

      - name: Execute Psalm
        run: vendor/bin/psalm --config .github/workflows-configs/psalm.xml.dist --no-progress

  pint:
    name: Laravel Pint
    runs-on: ubuntu-latest
    needs: ["dependencies"]

    strategy:
      fail-fast: true
      max-parallel: 10
      matrix:
        php: ["8.0", "8.1"]

    steps:
      - name: Set up PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          coverage: none
          extensions: mbstring
        env:
          update: true
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}-${{ github.run_id }}
          restore-keys: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}-${{ github.run_id }}

      - name: Install dependencies
        run: composer install --prefer-dist

      - name: Install Laravel Pint
        run: composer require laravel/pint:* --dev --with-all-dependencies

      - name: Execute Laravel Pint
        run: vendor/bin/pint --config .github/workflows-configs/pint.json --test

  rector:
    name: Rector
    runs-on: ubuntu-latest
    needs: ["dependencies"]

    strategy:
      fail-fast: true
      max-parallel: 10
      matrix:
        php: ["7.4", "8.0", "8.1"]

    steps:
      - name: Set up PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          coverage: none
          extensions: mbstring
        env:
          update: true
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}-${{ github.run_id }}
          restore-keys: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}-${{ github.run_id }}

      - name: Install dependencies
        run: composer install --prefer-dist

      - name: Execute Rector
        run: vendor/bin/rector process src --config .github/workflows-configs/rector.php --dry-run
